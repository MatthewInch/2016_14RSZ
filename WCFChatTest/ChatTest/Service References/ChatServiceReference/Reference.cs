//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatTest.ChatServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatServiceReference.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CountALetter", ReplyAction="http://tempuri.org/IService1/CountALetterResponse")]
        int CountALetter(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CountALetter", ReplyAction="http://tempuri.org/IService1/CountALetterResponse")]
        System.Threading.Tasks.Task<int> CountALetterAsync(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        ChatTestServicelibrary.CompositeType GetDataUsingDataContract(ChatTestServicelibrary.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<ChatTestServicelibrary.CompositeType> GetDataUsingDataContractAsync(ChatTestServicelibrary.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDefaultMessage", ReplyAction="http://tempuri.org/IService1/GetDefaultMessageResponse")]
        string GetDefaultMessage();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDefaultMessage", ReplyAction="http://tempuri.org/IService1/GetDefaultMessageResponse")]
        System.Threading.Tasks.Task<string> GetDefaultMessageAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SendMessage", ReplyAction="http://tempuri.org/IService1/SendMessageResponse")]
        void SendMessage(string Message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SendMessage", ReplyAction="http://tempuri.org/IService1/SendMessageResponse")]
        System.Threading.Tasks.Task SendMessageAsync(string Message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ChatTest.ChatServiceReference.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ChatTest.ChatServiceReference.IService1>, ChatTest.ChatServiceReference.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public int CountALetter(string value) {
            return base.Channel.CountALetter(value);
        }
        
        public System.Threading.Tasks.Task<int> CountALetterAsync(string value) {
            return base.Channel.CountALetterAsync(value);
        }
        
        public ChatTestServicelibrary.CompositeType GetDataUsingDataContract(ChatTestServicelibrary.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<ChatTestServicelibrary.CompositeType> GetDataUsingDataContractAsync(ChatTestServicelibrary.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public string GetDefaultMessage() {
            return base.Channel.GetDefaultMessage();
        }
        
        public System.Threading.Tasks.Task<string> GetDefaultMessageAsync() {
            return base.Channel.GetDefaultMessageAsync();
        }
        
        public void SendMessage(string Message) {
            base.Channel.SendMessage(Message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string Message) {
            return base.Channel.SendMessageAsync(Message);
        }
    }
}
